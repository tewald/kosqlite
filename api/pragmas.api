application_id;;;PRAGMA application_id;<br>PRAGMA application_id = integer;<br>The application_id PRAGMA is used to query or set the 32-bit unsigned big-endian "Application ID" integer located at offset 68 into the database header...
auto_vacuum;;;PRAGMA auto_vacuum;<br>PRAGMA auto_vacuum = 0 | NONE | 1 | FULL | 2 | INCREMENTAL;<br>Query or set the auto-vacuum status in the database...
automatic_index;;;PRAGMA automatic_index;<br>PRAGMA automatic_index = boolean;<br>Query, set, or clear the automatic indexing capability...
busy_timeout;;;PRAGMA busy_timeout;<br>PRAGMA busy_timeout = milliseconds;<br>Query or change the setting of the busy timeout...
cache_size;;;PRAGMA cache_size;<br>PRAGMA cache_size = pages;<br>PRAGMA cache_size = -kibibytes;<br>Query or change the suggested maximum number of database disk pages that SQLite will hold in memory at once per open database file...
cache_spill;;;PRAGMA cache_spill;<br>PRAGMA cache_spill=boolean;<br>The cache_spill pragma enables or disables the ability of the pager to spill dirty cache pages to the database file in the middle of a transaction...
case_sensitive_like;;;PRAGMA case_sensitive_like = boolean;<br>The default behavior of the LIKE operator is to ignore case for ASCII characters. Hence, by default 'a' LIKE 'A' is true...
checkpoint_fullfsync;;;PRAGMA checkpoint_fullfsync<br>PRAGMA checkpoint_fullfsync = boolean;<br>Query or change the fullfsync flag for checkpoint operations...
collation_list;;;PRAGMA collation_list;<br>Return a list of the collating sequences defined for the current database connection.
compile_options;;;PRAGMA compile_options;<br>This pragma returns the names of compile-time options used when building SQLite, one option per row...
database_list;;;PRAGMA database_list;<br>This pragma works like a query to return one row for each database attached to the current database connection...
defer_foreign_keys;;;PRAGMA defer_foreign_keys<br>PRAGMA defer_foreign_keys = boolean;<br>When the defer_foreign_keys PRAGMA is on, enforcement of all foreign key constraints is delayed until the outermost transaction is committed...
encoding;;;PRAGMA encoding;<br>PRAGMA encoding = "UTF-8";<br>PRAGMA encoding = "UTF-16";<br>PRAGMA encoding = "UTF-16le";<br>PRAGMA encoding = "UTF-16be";<br>In first form, if the main database has already been created, then this pragma returns the text encoding used by the main database, one of "UTF-8", "UTF-16le" (little-endian UTF-16 encoding) or "UTF-16be" (big-endian UTF-16 encoding). If the main database has not already been created, then the value returned is the text encoding that will be used to create the main database, if it is created by this session.The second through fifth forms of this pragma set the encoding that the main database will be created with if it is created by this session. The string "UTF-16" is interpreted as "UTF-16 encoding using native machine byte-ordering". It is not possible to change the text encoding of a database after it has been created and any attempt to do so will be silently ignored.Once an encoding has been set for a database, it cannot be changed.Databases created by the ATTACH command always use the same encoding as the main database. An attempt to ATTACH a database with a different text encoding from the "main" database will fail.
foreign_key_check;;;PRAGMA foreign_key_check;<br>PRAGMA foreign_key_check(table-name);<br>he foreign_key_check pragma checks the database, or the table called "table-name", for foreign key constraints that are violated and returns one row of output for each violation...
foreign_key_list;;;PRAGMA foreign_key_list(table-name);<br>This pragma returns one row for each foreign key constraint created by a REFERENCES clause in the CREATE TABLE statement of table "table-name".
foreign_keys;;;PRAGMA foreign_keys;<br>PRAGMA foreign_keys = boolean;<br>Query, set, or clear the enforcement of foreign key constraints...
freelist_count;;;PRAGMA freelist_count;<br>Return the number of unused pages in the database file.
fullfsync;;;PRAGMA fullfsync<br>PRAGMA fullfsync = boolean;<br>Query or change the fullfsync flag...
ignore_check_constrains;;;PRAGMA ignore_check_constraints = boolean;<br>This pragma enables or disables the enforcement of CHECK constraints. The default setting is off, meaning that CHECK constraints are enforced by default.
incremental_vacuum;;;PRAGMA incremental_vacuum(N);<br>The incremental_vacuum pragma causes up to N pages to be removed from the freelist. The database file is truncated by the same amount...
index_info;;;PRAGMA index_info(index-name);<br>This pragma returns one row each column in the named index. The first column of the result is the rank of the column within the index. The second column of the result is the rank of the column within the table. The third column of output is the name of the column being indexed.
index_list;;;PRAGMA index_list(table-name);<br>This pragma returns one row for each index associated with the given table. Columns of the result set include the index name and a flag to indicate whether or not the index is UNIQUE.
integrity_check;;;PRAGMA integrity_check;<br>PRAGMA integrity_check(N)<br>This pragma does an integrity check of the entire database...
journal_mode;;;PRAGMA journal_mode;<br>PRAGMA database.journal_mode;<br>PRAGMA journal_mode = DELETE | TRUNCATE | PERSIST | MEMORY | WAL | OFF<br>PRAGMA database.journal_mode = DELETE | TRUNCATE | PERSIST | MEMORY | WAL | OFF<br>This pragma queries or sets the journal mode for databases associated with the current database connection...
journal_size_limit;;;PRAGMA journal_size_limit<br>PRAGMA journal_size_limit = N ;<br>If a database connection is operating in exclusive locking mode or in persistent journal mode (PRAGMA journal_mode=persist) then after committing a transaction the rollback journal file may remain in the file-system.
legacy_file_format;;;PRAGMA legacy_file_format;<br>PRAGMA legacy_file_format = boolean<br>This pragma sets or queries the value of the legacy_file_format flag...
locking_mode;;;PRAGMA locking_mode;<br>PRAGMA locking_mode = NORMAL | EXCLUSIVE<br>This pragma sets or queries the database connection locking-mode. The locking-mode is either NORMAL or EXCLUSIVE...
max_page_count;;;PRAGMA max_page_count;<br>PRAGMA max_page_count = N;<br>Query or set the maximum number of pages in the database file. Both forms of the pragma return the maximum page count. The second form attempts to modify the maximum page count. The maximum page count cannot be reduced below the current database size.
mmap_size;;;PRAGMA database.mmap_size;<br>PRAGMA database.mmap_size=N<br>Query or change the maximum number of bytes that are set aside for memory-mapped I/O on a single database. The first form (without an argument) queries the current limit. The second form (with a numeric argument) sets the limit for the specified database, or for all databases if the optional database name is omitted. In the second form, if the database name is omitted, the limit that is set becomes the default limit for all databases that are added to the database connection by subsequent ATTACH statements...
page_count;;;PRAGMA page_count;<br>Return the total number of pages in the database file.
page_size;;;PRAGMA page_size;<br>PRAGMA page_size = bytes;<br>Query or set the page size of the database. The page size must be a power of two between 512 and 65536 inclusive...
query_only;;;PRAGMA query_only;<br>PRAGMA query_only = boolean;<br>The query_only pragma prevents all changes to database files when enabled.
quick_check;;;PRAGMA quick_check;<br>PRAGMA quick_check(N)<br>The pragma is like integrity_check except that it does not verify that index content matches table content. By skipping the verification of index content, quick_check is able to run much faster than integrity_check. Otherwise the two pragmas are the same.
read_uncommitted;;;PRAGMA read_uncommitted;<br>PRAGMA read_uncommitted = boolean;<br>Query, set, or clear READ UNCOMMITTED isolation. The default isolation level for SQLite is SERIALIZABLE. Any process or thread can select READ UNCOMMITTED isolation, but SERIALIZABLE will still be used except between connections that share a common page and schema cache. Cache sharing is enabled using the sqlite3_enable_shared_cache() API. Cache sharing is disabled by default...
recursive_triggers;;;PRAGMA recursive_triggers;<br>PRAGMA recursive_triggers = boolean;<br>Query, set, or clear the recursive trigger capability...
reverse_unordered_selects;;;PRAGMA reverse_unordered_selects;<br>PRAGMA reverse_unordered_selects = boolean;<br>When enabled, this PRAGMA causes SELECT statements without an ORDER BY clause to emit their results in the reverse order of what they normally would. This can help debug applications that are making invalid assumptions about the result order...
schema_version;;;PRAGMA schema_version;<br>PRAGMA schema_version = integer;<br>PRAGMA user_version;<br>PRAGMA user_version = integer;<br>The pragmas schema_version and user_version are used to set or get the value of the schema-version and user-version, respectively. The schema-version and the user-version are big-endian 32-bit signed integers stored in the database header at offsets 40 and 60, respectively...
secure_delete;;;PRAGMA secure_delete;<br>PRAGMA database.secure_delete;<br>PRAGMA secure_delete = boolean;<br>PRAGMA database.secure_delete = boolean;<br>Query or change the secure-delete setting. When secure-delete on, SQLite overwrites deleted content with zeros. The default setting is determined by the SQLITE_SECURE_DELETE compile-time option. When there are attached databases and no database is specified in the pragma, all databases have their secure-delete setting altered. The secure-delete setting for newly attached databases is the setting of the main database at the time the ATTACH command is evaluated. When multiple database connections share the same cache, changing the secure-delete flag on one database connection changes it for them all. 
shrink_memory;;;PRAGMA shrink_memory<br>This pragma causes the database connection on which it is invoked to free up as much memory as it can, by calling sqlite3_db_release_memory().
soft_heap_limit;;;PRAGMA soft_heap_limit<br>PRAGMA soft_heap_limit=N<br>This pragma invokes the sqlite3_soft_heap_limit64() interface with the argument N, if N is specified and is a non-negative integer. The soft_heap_limit pragma always returns the same integer that would be returned by the sqlite3_soft_heap_limit64(-1) C-language function.
synchronous;;;PRAGMA synchronous;<br>PRAGMA synchronous = 0 | OFF | 1 | NORMAL | 2 | FULL;<br>Query or change the setting of the "synchronous" flag. The first (query) form will return the synchronous setting as an integer.  When synchronous is FULL (2), the SQLite database engine will use the xSync method of the VFS to ensure that all content is safely written to the disk surface prior to continuing. This ensures that an operating system crash or power failure will not corrupt the database. FULL synchronous is very safe, but it is also slower. When synchronous is NORMAL (1), the SQLite database engine will still sync at the most critical moments, but less often than in FULL mode. There is a very small (though non-zero) chance that a power failure at just the wrong time could corrupt the database in NORMAL mode. But in practice, you are more likely to suffer a catastrophic disk failure or some other unrecoverable hardware fault. With synchronous OFF (0), SQLite continues without syncing as soon as it has handed data off to the operating system. If the application running SQLite crashes, the data will be safe, but the database might become corrupted if the operating system crashes or the computer loses power before that data has been written to the disk surface. On the other hand, some operations are as much as 50 or more times faster with synchronous OFF...
table_info;;;PRAGMA table_info(table-name);<br>This pragma returns one row for each column in the named table. Columns in the result set include the column name, data type, whether or not the column can be NULL, and the default value for the column. The "pk" column in the result set is zero for columns that are not part of the primary key, and is the index of the column in the primary key for columns that are part of the primary key.
temp_store;;;PRAGMA temp_store;<br>PRAGMA temp_store = 0 | DEFAULT | 1 | FILE | 2 | MEMORY;<br>Query or change the setting of the "temp_store" parameter. When temp_store is DEFAULT (0), the compile-time C preprocessor macro SQLITE_TEMP_STORE is used to determine where temporary tables and indices are stored. When temp_store is MEMORY (2) temporary tables and indices are kept in as if they were pure in-memory databases memory. When temp_store is FILE (1) temporary tables and indices are stored in a file. The temp_store_directory pragma can be used to specify the directory containing temporary files when FILE is specified. When the temp_store setting is changed, all existing temporary tables, indices, triggers, and views are immediately deleted. It is possible for the library compile-time C preprocessor symbol SQLITE_TEMP_STORE to override this pragma setting. The following table summarizes the interaction of the SQLITE_TEMP_STORE preprocessor macro and the temp_store pragma:
user_version;;;PRAGMA schema_version;<br>PRAGMA schema_version = integer;<br>PRAGMA user_version;<br>PRAGMA user_version = integer;<br>The pragmas schema_version and user_version are used to set or get the value of the schema-version and user-version, respectively. The schema-version and the user-version are big-endian 32-bit signed integers stored in the database header at offsets 40 and 60, respectively...
wal_autocheckpoint;;;PRAGMA wal_autocheckpoint;<br>PRAGMA wal_autocheckpoint=N;<br>This pragma queries or sets the write-ahead log auto-checkpoint interval. When the write-ahead log is enabled (via the journal_mode pragma) a checkpoint will be run automatically whenever the write-ahead log equals or exceeds N pages in length. Setting the auto-checkpoint size to zero or a negative value turns auto-checkpointing off...
wal_chekpoint;;;PRAGMA database.wal_checkpoint;<br>PRAGMA database.wal_checkpoint(PASSIVE);<br>PRAGMA database.wal_checkpoint(FULL);<br>PRAGMA database.wal_checkpoint(RESTART);<br>If the write-ahead log is enabled (via the journal_mode pragma), this pragma causes a checkpoint operation to run on database database, or on all attached databases if database is omitted. If write-ahead log mode is disabled, this pragma is a harmless no-op...
writable_schema;;;PRAGMA writable_schema = boolean;<br>When this pragma is on, the SQLITE_MASTER tables in which database can be changed using ordinary UPDATE, INSERT, and DELETE statements. Warning: misuse of this pragma can easily result in a corrupt database file.
count_changes;;;PRAGMA count_changes;<br>PRAGMA count_changes = boolean;<br>Query or change the count-changes flag. Normally, when the count-changes flag is not set, INSERT, UPDATE and DELETE statements return no data. When count-changes is set, each of these commands returns a single row of data consisting of one integer value - the number of rows inserted, modified or deleted by the command. The returned change count does not include any insertions, modifications or deletions performed by triggers, or any changes made automatically by foreign key actions...<br><br>This pragma is deprecated
data_store_directory;;;PRAGMA data_store_directory;<br>PRAGMA data_store_directory = 'directory-name';<br>Query or change the value of the sqlite3_data_directory global variable, which windows operating-system interface backends use to determine where to store database files specified using a relative pathname...<br><br>This pragma is deprecated
default_cache_size;;;PRAGMA default_cache_size;<br>PRAGMA default_cache_size = Number-of-pages;<br>This pragma queries or sets the suggested maximum number of pages of disk cache that will be allocated per open database file. The difference between this pragma and cache_size is that the value set here persists across database connections. The value of the default cache size is stored in the 4-byte big-endian integer located at offset 48 in the header of the database file.<br><br>This pragma is deprecated
empty_result_callbacks;;;PRAGMA empty_result_callbacks;<br>PRAGMA empty_result_callbacks = boolean;<br>Query or change the empty-result-callbacks flag...<br><br>This pragma is deprecated
full_column_names;;;PRAGMA full_column_names;<br>PRAGMA full_column_names = boolean;<br>Query or change the full_column_names flag. This flag together with the short_column_names flag determine the way SQLite assigns names to result columns of SELECT statements...<br><br>This pragma is deprecated
short_column_names;;;PRAGMA short_column_names;<br>PRAGMA short_column_names = boolean;<br>Query or change the short-column-names flag. This flag affects the way SQLite names columns of data returned by SELECT statements. See the full_column_names pragma for full details...<br><br>This pragma is deprecated
temp_store_directory;;;PRAGMA temp_store_directory;<br>PRAGMA temp_store_directory = 'directory-name';<br>Query or change the value of the sqlite3_temp_directory global variable, which many operating-system interface backends use to determine where to store temporary tables and indices...<br><br>This pragma is deprecated
parser_trace;;;PRAGMA parser_trace = boolean;<br>If SQLite has been compiled with the SQLITE_DEBUG compile-time option, then the parser_trace pragma can be used to turn on tracing for the SQL parser used internally by SQLite. This feature is used for debugging SQLite itself.<br><br>This pragma is intended for use when debugging SQLite itself. It is only contained in the build when the SQLITE_DEBUG compile-time option is used.
vdbe_addoptrace;;;PRAGMA vdbe_addoptrace = boolean;<br>If SQLite has been compiled with the SQLITE_DEBUG compile-time option, then the vdbe_addoptrace pragma can be used to cause a complete VDBE opcodes to be displayed as they are created during code generation. This feature is used for debugging SQLite itself. See the VDBE documentation for more information.<br><br>This pragma is intended for use when debugging SQLite itself. It is only contained in the build when the SQLITE_DEBUG compile-time option is used.
vdbe_debug;;;PRAGMA vdbe_debug = boolean;<br>If SQLite has been compiled with the SQLITE_DEBUG compile-time option, then the vdbe_debug pragma is a shorthand for three other debug-only pragmas: vdbe_addoptrace, vdbe_listing, and vdbe_trace. This feature is used for debugging SQLite itself. See the VDBE documentation for more information.<br><br>This pragma is intended for use when debugging SQLite itself. It is only contained in the build when the SQLITE_DEBUG compile-time option is used.
vdbe_listing;;;PRAGMA vdbe_debug = boolean;<br>If SQLite has been compiled with the SQLITE_DEBUG compile-time option, then the vdbe_debug pragma is a shorthand for three other debug-only pragmas: vdbe_addoptrace, vdbe_listing, and vdbe_trace. This feature is used for debugging SQLite itself. See the VDBE documentation for more information.<br><br>This pragma is intended for use when debugging SQLite itself. It is only contained in the build when the SQLITE_DEBUG compile-time option is used.
vdbe_trace;;;PRAGMA vdbe_debug = boolean;<br>If SQLite has been compiled with the SQLITE_DEBUG compile-time option, then the vdbe_debug pragma is a shorthand for three other debug-only pragmas: vdbe_addoptrace, vdbe_listing, and vdbe_trace. This feature is used for debugging SQLite itself. See the VDBE documentation for more information.<br><br>This pragma is intended for use when debugging SQLite itself. It is only contained in the build when the SQLITE_DEBUG compile-time option is used.
stats;;;PRAGMA stats;<br>This pragma returns auxiliary information about tables and indices. The returned information is used during testing to help verify that the query planner is operating correctly. The format and meaning of this pragma will likely change from release to the next. Because of its volatility, the behavior and output format of this pragma are deliberately undocumented.<br><br>The intended use of this pragma is only for testing and validation of SQLite. This pragma is subject to change without notice and is not recommended for use by application programs.